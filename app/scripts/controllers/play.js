'use strict';

angular.module('newsGameApp')
	.controller('PlayCtrl', function($document, $rootScope, $scope, $routeParams, $location, ipCookie, $log, prod, $timeout, $interval, dataService, titleService, utils) {

		$scope.debug = ($routeParams.debug);

		titleService.setTitle('Play');

		// debug config
		var delayModifier = ($scope.debug ? 0.05 : 1);

		var chatDelay = dataService.data.settings.chatDelay;

		// reference to all windows on the desktop
		$scope.windows = {};

		// current difficulty level
		$scope.level = ipCookie('level') ? parseInt(ipCookie('level'), 10) : 1;
		ipCookie('level', $scope.level, {
			expires: 365
		});

		// Scoring
		$scope.scoring = dataService.data.settings.scoring;

		// TotalTime ( and RemainingTime ) are loaded from /data/settings.json
		$scope.totalTime = $scope.remainingTime = dataService.data.settings.totalTime['level-' + $scope.level];

		// all themes are loaded from /data/all.json
		$scope.themes = dataService.data.all.themes;

		// selected theme
		$scope.currentTheme = ipCookie('theme') ? ipCookie('theme') : $scope.currentTheme;
		$scope.mandatory = ipCookie('mandatory') ? ipCookie('mandatory') : $scope.mandatory;

		$scope.actionsCost = dataService.data.settings.actionsCost;

		$scope.showScoring = false;

		$rootScope.background = 'play-level-' + $scope.level;

		/*
		CuitCuiter
		*/

		// currently displayed cuits
		$scope.allCuits = [];
		$scope.cuits = [];

		// open Cuit source window
		var openSourceThemeCallback = false;
		$scope.openSource = function(id) {
			// $log.log("openSource(" + id);
			$scope.closeWin('source');
			$scope.currentSource = dataService.data.all.sources[id];
			$scope.openWin('source');
			if (openSourceThemeCallback) {
				openSourceThemeCallback();
			}
		};

		// Verify source Theme ( + decrement time counter )
		var verifySourceThemeCallback = false;
		$scope.verifySourceTheme = function(id) {
			// $log.log("verifySourceTheme(" + id);
			dataService.data.all.sources[id].themeVerified = true;
			$scope.currentSource = dataService.data.all.sources[id];
			decrementTime('verify-source-theme');
			applySourceTheme();
			if (verifySourceThemeCallback) {
				verifySourceThemeCallback();
			}
		};

		function applySourceTheme() {
			angular.forEach($scope.cuits, function(cuit, id) {
				$scope.cuits[id].author = dataService.data.all.sources[cuit.source];
				$scope.cuits[id].themeVerified = true;
			});
		}

		// add cuit to Cuicuiter timeline

		$scope.cuitsHover = false;
		$scope.cuitsOver = function() {
			$scope.cuitsHover = true;
		};
		$scope.cuitsOut = function() {
			$scope.cuitsHover = false;
		};

		function addCuit(next, force, author, theme) {
			// $log.log("addCuit", next, force, author, theme);
			if (!force && ($scope.cuitsHover || $scope.skipCuits)) {
				$timeout(function() {
					addCuit(true);
				}, (Math.random() * chatDelay * delayModifier) + 800);
			} else {
				var added = false;
				// iterate through all cuits ( loaded from /data/all.json )
				var cuits = utils.shuffle(Object.keys(dataService.data.all.cuits));
				angular.forEach(cuits, function(cuitIdx) {
					var cuit = dataService.data.all.cuits[cuitIdx];

					// if cuit is not currenlty displayed
					if (!added && $scope.allCuits.indexOf(cuitIdx) === -1) {
						if ((!author && !theme) || cuit.source === author || cuit.theme === theme) {
							cuit.author = dataService.data.all.sources[cuit.source];
							if (cuit.author) {
								cuit.themeVerified = cuit.author.themeVerified;
							}
							$scope.allCuits.push(cuitIdx);
							$scope.cuits.unshift(cuit);
							$timeout(function() {
								cuit.visible = true;
							}, 1);
							added = true;
							// scheduled next cuit
							if (next) {
								$timeout(function() {
									addCuit(true);
								}, (Math.random() * chatDelay * delayModifier) + 800);
							}
						}
					}
				});
			}
		}

		// Verify Cuit Theme ( + decrement time counter )
		var verifyCuitThemeCallback = false;
		$scope.verifyCuitTheme = function(cuit) {
			// $log.log("verifyCuitTheme(" + cuit);
			$scope.currentCuit = cuit;
			cuit.themeVerified = true;
			decrementTime('verify-cuit-theme');
			if (verifyCuitThemeCallback) {
				selectedCuit = cuit;
				verifyCuitThemeCallback();
			}
		};

		// Verify Cuit Credibility ( + decrement time counter )
		var verifyCuitCredibilityCallback = false;
		$scope.verifyCuitCredibility = function(cuit) {
			// $log.log("verifyCuitCredibility(" + cuit);
			if (verifyCuitCredibilityCallback) {
				selectedCuit = cuit;
				$scope.canCall = true;
				verifyCuitCredibilityCallback();
			}
		};

		function updateCuitCredibility() {
			$log.log(selectedCuit);
			$log.log(selectedContact);
			if (selectedContact.themes.indexOf(selectedCuit.theme) === -1) {
				selectedCuit.credibilityVerified = true;
			}
		}

		/*
		Skoupe
		*/

		// all contacts are loaded from /data/all.json
		$scope.contacts = []; //dataService.data.all.contacts;
		$scope.allContacts = [];

		// current contact displayed in contact detail window
		$scope.currentContact = null;

		function addContact(theme) {
			$log.log("addContact(", theme);
			var contacts = utils.shuffle(Object.keys(dataService.data.all.contacts));
			var added = false;
			angular.forEach(contacts, function(contactIdx) {
				var contact = dataService.data.all.contacts[contactIdx];
				if (!added && $scope.allContacts.indexOf(contactIdx) === -1) {
					if ((!theme) || contact.themes.indexOf(theme) !== -1) {
						$scope.allContacts.push(contactIdx);
						$scope.contacts.unshift(contact);
						added = true;
					}
				}
			});
		}

		// open contact detail window
		$scope.openContact = function(id) {
			// $log.log("openContact(" + id);
			$scope.closeWin('contact');
			$scope.currentContact = $scope.contacts[id];
			$scope.openWin('contact');
		};

		var callContactCallback;
		var selectedContact;
		$scope.canCall = false;
		$scope.callContact = function(contact) {
			$log.log("callContact(", contact.id);
			if (callContactCallback) {
				decrementTime('verify-cuit-credibility');
				selectedContact = contact;
				updateCuitCredibility();
				callContactCallback();
			}
		};

		// current chat displayed in chat window
		$scope.currentChat = null;

		// open chat window
		$scope.openChat = function(id) {
			// $log.log("openChat(" + id);
			$scope.closeWin('chat');
			$scope.currentchatContact = $scope.chat[id];
			$scope.openWin('chat');
		};

		/*
		Timeline
		*/

		// decrement remaining time

		$scope.gaugeLevel = 'green';

		function decrementTime(type) {
			// the cost of each actions are specified in /data/settings.json
			var value = dataService.data.settings.actionsCost[type];
			// $log.log("decrementTime : " + value + " (" + type + ")");
			$scope.remainingTime -= value;
			if ($scope.remainingTime / $scope.totalTime <= 0.75) {
				$scope.gaugeLevel = 'lightgreen';
			}
			if ($scope.remainingTime / $scope.totalTime <= 0.5) {
				$scope.gaugeLevel = 'yellow';
			}
			if ($scope.remainingTime / $scope.totalTime <= 0.25) {
				$scope.gaugeLevel = 'orange';
			}
			if ($scope.remainingTime / $scope.totalTime <= 0.15) {
				$scope.gaugeLevel = 'red';
			}
		}

		/*
		Generic Prompt
		*/
		var promptCallback;
		$scope.promptCancel = function() {
			promptCallback = null;
			$scope.closeWin('prompt');
		};
		$scope.promptConfirm = function() {
			if (promptCallback) {
				promptCallback();
			}
		};

		/*
		Generic Window Management
		*/

		$scope.tooltip = {
			active: false,
			content: 'Quisque id neque scelerisque velit.',
			position: function($elt, top, left) {
				jQuery('#tooltip').css({
					top: $elt.offset().top + top,
					left: $elt.offset().left + left
				});
			}
		};

		// create a new window (KendoUI will automattically instatiate ir)

		function createWindow(id, args) {
			$scope.windows[id] = angular.extend({
				visible: false,
				active: true,
				actions: ['Close'],
				resizable: false,
				modal: false,
				width: 400,
				height: 400,
				position: {
					top: 300,
					left: 300
				}
			}, args);
		}

		// show/hide window
		$scope.toggleWin = function(id) {
			if ($scope.windows[id].visible) {
				$scope.closeWin(id);
			} else {
				$scope.openWin(id);
			}
		};
		$scope.openWin = function(id) {
			if (!$scope.windows[id].visible) {
				jQuery('#' + id).data('kendoWindow').open();
			}
		};
		$scope.closeWin = function(id) {
			if ($scope.windows[id].visible) {
				jQuery('#' + id).data('kendoWindow').close();
			}
		};

		/*
		Initialisation
		*/

		createWindow('cuicuiter', {
			title: 'Cuicuiter',
			visible: false,
			template: 'cuicuiter-main',
			height: 505,
			position: {
				top: 25,
				left: 20
			}
		});
		createWindow('source', {
			title: 'Source',
			active: false,
			template: 'cuicuiter-source',
			width: 400,
			height: 225,
			position: {
				top: 125,
				left: 250
			}
		});

		createWindow('skoupe', {
			title: 'Skoupe',
			visible: false,
			active: false,
			template: 'skoupe-main',
			height: 150,
			position: {
				top: 50,
				left: 600
			}
		});

		createWindow('contact', {
			title: 'Contact',
			active: false,
			visible: false,
			template: 'skoupe-contact',
			position: {
				top: 125,
				left: 550
			}
		});

		createWindow('chat', {
			title: 'Conversation',
			active: false,
			template: 'skoupe-chat',
			height: 300,
			position: {
				top: 225,
				left: 550
			}
		});

		createWindow('notepad', {
			title: 'Bloc-Notes',
			template: 'notepad',
			visible: false,
			active: true,
			height: 200,
			position: {
				top: 250,
				left: 450
			}
		});

		createWindow('themeSelector', {
			title: "Choix d'une thÃ©matique",
			template: 'theme-selector',
			active: false,
			actions: [],
			modal: true,
			height: 280,
			position: {
				top: 250,
				left: 250
			}
		});

		createWindow('prompt', {
			title: "Avertissement",
			template: 'prompt',
			active: false,
			actions: [],
			modal: true,
			height: 130,
			width: 220,
			position: {
				top: '45%',
				left: '45%'
			}
		});

		createWindow('blog', {
			title: 'Mon blog ::: Publier',
			active: true,
			template: 'blog',
			height: 360,
			width: 285,
			position: {
				top: 250,
				left: 550
			}
		});

		/*
		Timeout.then wrapper
		*/

		var steps = [];

		function doSteps() {
			var step = null;
			angular.forEach(steps, function(v) {
				if (step === null) {
					step = $timeout(v[1], v[0] * delayModifier);
				} else {
					step = step.then(function() {
						return $timeout(v[1], v[0] * delayModifier);
					});
				}
			});
		}

		// add Step

		function addStep(delay, callback) {
			steps.push([delay, callback]);
		}

		// Add Chat Step

		function addChat(delay, speaker, content) {
			addStep(500, function() {
				$scope.currentChat.status = ((speaker === 'other') ? 'reading' : 'writing');
				var $container = angular.element(document.getElementById('chat-scroll'));
				var chatBottom = angular.element(document.getElementById('chat-bottom'));
				$container.scrollToElement(chatBottom, 30, 100);
			});
			addStep(delay - 500, function() {
				$scope.currentChat.discussion.push({
					speaker: speaker,
					content: content
				});
				$scope.currentChat.status = '';
				$timeout(function() {
					var $container = angular.element(document.getElementById('chat-scroll'));
					var chatBottom = angular.element(document.getElementById('chat-bottom'));
					$container.scrollToElement(chatBottom, 30, 100);
				}, 50);
			});
		}

		/*
		Scenarii
		*/

		function scenario() {
			if (scenarii['level' + $scope.level]) {
				scenarii['level' + $scope.level]();
			}
		}

		var scenarii = {};

		// Level 1
		scenarii.level1 = function() {
			$log.log(">scenario1");

			$scope.currentChat = {
				contact: "Medhi",
				discussion: []
			};

			steps = [];

			addStep(500, function() {
				$scope.openWin('cuicuiter');
			});

			addStep(chatDelay, function() {
				$scope.openWin('chat');
			});

			addChat(chatDelay, 'other', "Alors, tu as lancÃ© Cuicuitter ?");
			addChat(chatDelay, 'me', "Oui, je viens de le faire, mais je comprends rien... Câest quoi tous ces messages ?");

			addChat(chatDelay, 'other', "Ca sâappelle des Â« Cuitts Â» ! Câest des messages trÃ¨s courts. Ils viennent sâafficher dans ta timeline dÃ¨s que quelquâun les poste.");
			addChat(chatDelay, 'me', "Mais justement, qui les poste ?");
			addChat(chatDelay, 'other', "Tout le monde ! Des stars, des sportifs, des pros de lâÃ©conomie ou de la politique... Y en a pour tous les goÃ»ts ! En gros, il y a six grandes thÃ©matiques. Attends, je tâenvoie la liste...");

			addStep(500, function() {
				$scope.openWin('notepad');
			});

			addChat(chatDelay, 'me', "Ah merci ! Mais... tout ne mâintÃ©resse pas, lÃ -dedans. Tu sais que moi, ma passion, câest...");

			addStep(500, function() {
				$scope.closeWin('notepad');
				$scope.openWin('themeSelector');
			});

			addStep(chatDelay, function() {
				if ($scope.debug) {
					var $choices = jQuery('#themeSelector :radio');
					$choices.eq(Math.round(Math.random() * $choices.length)).click();
					jQuery('#themeSelector button').click();
				}
			});

			doSteps();

		};

		scenarii.level1Phase2 = function() {

			$scope.closeWin('themeSelector');

			$scope.currentTheme = jQuery('#themeSelector :checked').val();

			$log.log(">level1Phase2 : " + $scope.currentTheme);

			ipCookie('theme', $scope.currentTheme, {
				expires: 365
			});

			steps = [];

			addChat(500, 'me', $scope.themes[$scope.currentTheme] + "! Si je veux trouver des infos sur ce sujet-lÃ , je fais comment ?");
			addChat(chatDelay, 'other', "Tu ouvres grands tes yeux... et tu fais marcher ton cerveau ! En lisant les Cuitts, tu pourras deÌterminer de quoi ils parlent.");

			addChat(chatDelay, 'me', "Hum... pas facile !");
			addChat(chatDelay, 'other', "Je vois. Si tu as un doute, tu peux faire une recherche pour vÃ©rifier la thÃ©matique de chaque Cuitt. Regarde : choisis-en un, nâimporte lequel !");

			addStep(chatDelay, function() {
				// show info popup
				$scope.skipCuits = true;
				$scope.tooltip.content = "Cliquez maintenant sur le bouton <strong>VÃ©rifier la thÃ©matique</strong>";
				$scope.tooltip.position(jQuery('#cuicuiter .cuit').not(".verified-theme").first().find('.metas .theme button'), 0, 100);
				$scope.tooltip.active = true;
				verifyCuitThemeCallback = function() {
					scenarii.level1Phase3();
				};
			});

			addStep(chatDelay, function() {
				if ($scope.debug) {
					jQuery('#cuicuiter .cuit').not(".verified-theme").first().find('.theme button').click();
				}
			});

			doSteps();

		};
		$scope.level1Phase2 = scenarii.level1Phase2;

		var selectedCuit;
		scenarii.level1Phase3 = function() {

			// $scope.skipCuits = false;
			$scope.tooltip.active = false;
			verifyCuitThemeCallback = false;

			$log.log(">level1Phase3");

			steps = [];

			addChat(chatDelay, 'other', "Et voilÃ  ! Tu vois, Ã§a a pris un peu de temps mais Ã§a en valait la peine ! Maintenant, tu sais que ce cuitt parle de " + selectedCuit.theme + ".");
			addChat(chatDelay, 'other', "Tu vois, câest signalÃ© par le petit picto qui a remplacÃ© le point dâinterrogation en dessous du message !");

			if (selectedCuit.theme === $scope.currentTheme) {
				addChat(chatDelay, 'me', "Ah, gÃ©niale, cette info ! justement ce qui mâintÃ©resse !");
			} else {
				addChat(chatDelay, 'me', "Ah ouais... Pas mal, cette info, mais, moi, ce qui mâintÃ©resse, câest " + $scope.themes[$scope.currentTheme] + ".");
			}
			addChat(chatDelay, 'other', "Ce qui est cool avec Cuicuitter, câest que je suis sÃ»r quâen fouillant dans la timeline, tu peux trouver un autre cuit qui parle de " + $scope.themes[$scope.currentTheme] + ". A toi de jouer !");

			addStep(chatDelay, function() {
				// show info popup
				addCuit(false, true);
				$scope.skipCuits = true;
				$scope.tooltip.content = "Cliquez maintenant sur le bouton <strong>VÃ©rifier la thÃ©matique</strong>";
				$scope.tooltip.position(jQuery('#cuicuiter .cuit').not(".verified-theme").first().find('.metas .theme button'), 0, 100);
				$scope.tooltip.active = true;
				verifyCuitThemeCallback = function() {
					scenarii.level1Phase4();
				};
			});

			addStep(chatDelay, function() {
				if ($scope.debug) {
					jQuery('#cuicuiter .cuit').not(".verified-theme").first().find('.theme button').click();
				}
			});

			doSteps();

		};

		scenarii.level1Phase4 = function() {

			$scope.skipCuits = false;
			$scope.tooltip.active = false;
			verifyCuitThemeCallback = false;

			$log.log(">level1Phase4");

			steps = [];

			$log.log(selectedCuit.theme, " === ", $scope.currentTheme);
			if (selectedCuit.theme === $scope.currentTheme) {
				scenarii.level1Phase5();
				return;
			} else {
				verifyCuitThemeCallback = function() {
					scenarii.level1Phase4();
				};

				addChat(chatDelay, 'me', "Ah... ce Cuitt-lÃ  ne mâintÃ©resse pas trop. Attends, jâen cherche un autre !");
				addStep(chatDelay, function() {
					// show info popup
					addCuit(false, true);
					/*
					var nbCuits = Math.round(Math.random() * 3);
					while (nbCuits--) {
						$timeout(function() {
							addCuit(false, true);
						}, Math.round(500 + Math.random() * 500));
					}
					*/
					$scope.skipCuits = true;
					$scope.tooltip.content = "Cliquez maintenant sur le bouton <strong>VÃ©rifier la thÃ©matique</strong>";
					$scope.tooltip.position(jQuery('#cuicuiter .cuit').not(".verified-theme").first().find('.metas .theme button'), 0, 100);
					$scope.tooltip.active = true;
				});
			}

			addStep(chatDelay, function() {
				if ($scope.debug) {
					jQuery('#cuicuiter .cuit').not(".verified-theme").first().find('.theme button').click();
				}
			});

			doSteps();

		};

		scenarii.level1Phase5 = function() {

			$scope.tooltip.active = false;
			verifyCuitThemeCallback = false;

			$log.log(">level1Phase5");

			steps = [];

			addChat(chatDelay, 'me', "Ouah, gÃ©nial ! Câest super intÃ©ressant ce truc !.");
			addChat(chatDelay, 'other', "Tâas vu ? Jâapprends plein dâinfos de premiÃ¨re fraÃ®cheur depuis que je mâen sers... ");
			addChat(chatDelay, 'other', "Bon, il y a aussi des trucs un peu bidon, mais en geÌneÌral, quand tu vÃ©rifies qui poste, tu peux savoir si câest du solide ou pas...");
			addChat(chatDelay, 'me', "Ah ? Comment on fait Ã§a ?");
			addChat(chatDelay, 'other', "Ben, pour voir la fiche de quelquâun, il faut cliquer sur sa photo dâavatar ou sur son nom dâutilisateur.");
			addStep(chatDelay, function() {
				addCuit(false, true);
				addCuit(false, true, null, $scope.currentTheme);
				addCuit(false, true);
			});
			addChat(chatDelay, 'other', "Regarde, tu vois le gars qui vient de poster trois messages ? Tu peux cliquer sur sa photo...");
			addStep(chatDelay, function() {
				// add new cuits
				$scope.skipCuits = true;
				var authors = Object.keys(dataService.data.all.sources);
				var author = authors[Math.round(Math.random() * authors.length)];
				addCuit(false, true, author);
				addCuit(false, true, author);
				addCuit(false, true, author);
				// show info popup
				$scope.tooltip.content = "Cliquez sur le profil de l'auteur";
				$scope.tooltip.position(jQuery('#cuicuiter .cuit').not(".verified-theme").first().find('.source'), 0, 100);
				$scope.tooltip.active = true;
				openSourceThemeCallback = function() {
					scenarii.level1Phase6();
				};
			});
			addStep(chatDelay, function() {
				if ($scope.debug) {
					jQuery('#cuicuiter .cuit').not(".verified-theme").first().find('.source').click();
				}
			});

			doSteps();

		};

		scenarii.level1Phase6 = function() {

			$scope.tooltip.active = false;
			verifyCuitThemeCallback = false;
			openSourceThemeCallback = false;

			$log.log(">level1Phase6");

			steps = [];

			addStep(chatDelay, function() {
				// show info popup
				$scope.tooltip.content = "Cliquez maintenant sur le bouton <strong>Analyser la source</strong>";
				$scope.tooltip.position(jQuery('#source .metas .theme button'), 0, 100);
				$scope.tooltip.active = true;
				verifySourceThemeCallback = function() {
					scenarii.level1Phase7();
				};
			});

			addStep(chatDelay, function() {
				if ($scope.debug) {
					jQuery('#source .metas .theme button').click();
				}
			});

			doSteps();

		};

		scenarii.level1Phase7 = function() {

			$scope.tooltip.active = false;
			verifySourceThemeCallback = false;

			$log.log(">level1Phase7");

			steps = [];

			addChat(chatDelay, 'me', "Ouah, trop cool !");
			addChat(chatDelay, 'other', "Tâas vu ? Analyser une source, Ã§a prend du temps, mais aprÃ¨s tu connais la thÃ©matique de chacun de ses Cuitts !");
			addChat(chatDelay, 'me', "Câest gÃ©nial, Cuicuitter ! Ca doit Ãªtre un super outil pour les journalistes, Ã§a !");
			addChat(chatDelay, 'other', "CarrÃ©ment !");
			addChat(chatDelay, 'me', "Tiens, mais dâailleurs... Journaliste... VoilÃ  un mÃ©tier qui me plairait Ã  fond !");

			addChat(chatDelay, 'other', "Ah ouais ? Cool ! Ben voilÃ , plus besoin de te prendre la tÃªte, tu sais quoi mettre sur ta fiche dâorientation ! Mais tu vas devoir apprendre Ã  maÃ®triser Cuicuitter Ã  mort, alors !");

			addStep(2500, function() {
				// show scoring
				showScoring();
			});

			doSteps();

		};

		// Level 2
		scenarii.level2 = function() {
			$log.log(">scenario2");

			$scope.currentChat = {
				contact: "Medhi",
				discussion: []
			};

			$scope.currentTheme = ipCookie('theme');

			steps = [];

			addStep(500, function() {
				$scope.openWin('cuicuiter');
			});

			addStep(chatDelay, function() {
				$scope.openWin('chat');
			});

			addChat(chatDelay, 'other', "Salut !");
			addChat(chatDelay, 'me', "Salut ! Ca roule ?");
			addChat(chatDelay, 'other', "Bien, et toi ? Alors, tu rÃ©vises le concours pour les Ã©coles de journalisme ?");
			addChat(chatDelay, 'me', "Pfff... Mâen parle pas, câest crevant x_x. En plus, jâai ouvert un blog pour mâentrainer Ã  Ã©crire des articles...");
			addChat(chatDelay, 'other', "Ah bon ? Un blog ? Cool ! Sur quel sujet ?");
			addChat(chatDelay, 'me', "Sur " + $scope.themes[$scope.currentTheme] + ".");
			addChat(chatDelay, 'other', "Ah, jâaurais dÃ» mâen douter ! Câest super ! Comment tu fais pour trouver des sujets ?");
			addChat(chatDelay, 'me', "Jâutilise Cuicuitter ! Mais je dois faire gaffe. Si je veux que mes lecteurs soient contents, jâai intÃ©rÃªt Ã  choisir des infos sur la bonne thÃ©matique...");
			addChat(chatDelay, 'other', "Et comment tu fais pour le savoir ?");
			addChat(chatDelay, 'me', "Jâanalyse chaque info...");
			addChat(chatDelay, 'other', "Tu peux aussi analyser les sources directement en cliquant sur les photos des utilisateurs, tu sais ?");
			addChat(chatDelay, 'me', "Oui ! Câest vrai, câest trÃ¨s efficace, mÃªme si Ã§a prend plus de temps... Allez, dâailleurs je te laisse, il faut que je me mette au travail.");
			addChat(chatDelay, 'other', "Ok/ Bon courage ;-)");

			addStep(2500, function() {
				$scope.closeWin('chat');
			});

			addStep(500, function() {
				// show info popup
				$scope.tooltip.content = "Choisissez des infos dans votre fil Cuicuitter et publiez-les sur votre blog. Attention : choisissez-les bien dans la thÃ©matique " + $scope.themes[$scope.currentTheme] + ". Et faites attention : le temps passe vite ! ";
				$scope.tooltip.position(jQuery('#cuicuiter'), 0, 100);
				$scope.tooltip.active = true;
				$scope.openWin('blog');
			});

			addStep(500, function() {
				// $scope.tooltip.active = false;
			});

			addStep(chatDelay, function() {
				if ($scope.debug) {
					var i = 6; //2 + Math.round(Math.random() * 3);
					var max = 10;
					while (i && max) {
						addCuit(false, true);
						var cuit = Math.floor(Math.random() * Object.keys($scope.cuits).length);
						if (!$scope.cuits[cuit].published) {
							$scope.publishCuit($scope.cuits[cuit], true);
							i--;
						}
						max--;
					}
					scenarii.level2End();
				}
			});

			doSteps();

		};

		scenarii.level2End = function() {
			$log.log(">level2End");
			showScoring();
		};

		// Level 3
		scenarii.level3 = function() {
			$log.log(">scenario3");

			$scope.skipCuits = true;

			$scope.currentChat = {
				contact: "Jessica",
				discussion: []
			};

			$scope.currentTheme = ipCookie('theme');
			$scope.mandatoryTheme = ipCookie('mandatory');

			steps = [];

			addStep(500, function() {
				$scope.openWin('cuicuiter');
			});

			addStep(chatDelay, function() {
				$scope.openWin('chat');
			});

			addChat(chatDelay, 'other', "Vous Ãªtes connectÃ©(e) ?");
			addChat(chatDelay, 'me', "Oui, Ã§a y est !");
			addChat(chatDelay, 'other', "Alors je vais vous montrer comment vÃ©rifier une info. Commencez par vÃ©rifier la thÃ©matique d'un cuit.");

			addStep(chatDelay, function() {
				addCuit(false, true, null, $scope.currentTheme);
				addCuit(false, true, null, $scope.currentTheme);
				// show info popup
				$scope.skipCuits = true;
				$scope.tooltip.content = "Cliquez maintenant sur le bouton <strong>VÃ©rifier la thÃ©matique</strong>";
				$scope.tooltip.position(jQuery('#cuicuiter .cuit').not(".verified-theme").first().find('.metas .theme button'), 0, 100);
				$scope.tooltip.active = true;
				verifyCuitThemeCallback = function() {
					scenarii.level3Phase2();
				};
			});

			addStep(chatDelay, function() {
				if ($scope.debug) {
					jQuery('#cuicuiter .cuit').not(".verified-theme").first().find('.theme button').click();
				}
			});

			doSteps();

		};

		scenarii.level3Phase2 = function() {
			$log.log(">scenario3Phase2");
			steps = [];
			addChat(chatDelay, 'other', "TrÃ¨s bien ! Vous avez vu, Ã§a parle de " + $scope.themes[selectedCuit.theme] + "... Ca pourrait intÃ©resser nos lecteurs ! Mais il faut vÃ©rifier que lâinfo est bien crÃ©dible. Câest Ã  Ã§a que sert le nouveau bouton qui vient dâapparaÃ®tre. Cliquez dessus.");

			addStep(chatDelay, function() {
				// show info popup
				$scope.tooltip.content = "Cliquez maintenant sur le bouton <strong>VÃ©rifier la crÃ©dibilitÃ©</strong>";
				$scope.tooltip.position(jQuery('#cuicuiter .cuit').not(".verified-credibility").first().find('.metas .credibility button'), 0, 100);
				$scope.tooltip.active = true;
				verifyCuitCredibilityCallback = function() {
					scenarii.level3Phase3();
				};
			});

			addStep(chatDelay, function() {
				if ($scope.debug) {
					jQuery('#cuicuiter .cuit').not(".verified-credibility").first().find('.credibility button').click();
				}
			});
			doSteps();
		};

		scenarii.level3Phase3 = function() {
			$log.log(">scenario3Phase3");
			steps = [];

			addStep(500, function() {
				$scope.openWin('skoupe');
				addContact();
				addContact(selectedCuit.theme);
				addContact();
			});

			addChat(chatDelay, 'other', "Pour vÃ©rifier une info, vous devez contacter quelquâun en qui vous avez confiance. Jâai rajoutÃ© trois personnes dans votre carnet dâadresses. Mais attention ! Il faut que vous choisissiez un contact qui sây connaÃ®t dans la thÃ©matique " + $scope.themes[$scope.mandatory] + ". A vous de jouer !");

			addStep(chatDelay, function() {
				// show info popup
				$scope.tooltip.content = "Choisissez un contact";
				$scope.tooltip.position(jQuery('#skoupe .inner'), 0, 100);
				$scope.tooltip.active = true;
				callContactCallback = function() {
					scenarii.level3Phase4();
				};
			});

			addStep(chatDelay, function() {
				if ($scope.debug) {
					var contact = utils.shuffle($scope.contacts)[0];
					$scope.callContact(contact);
				}
			});

			doSteps();
		};

		scenarii.level3Phase4 = function() {
			$log.log(">scenario3Phase4");
			steps = [];

			if (selectedContact.themes.indexOf(selectedCuit.theme) === -1) {
				addChat(chatDelay, 'other', "Eh non ! Ce contact nâest pas spÃ©cialiste de " + $scope.themes[selectedCuit.theme] + ". Regardez bien les petites icÃ´nes dans la colonne Â« ThÃ©matique Â» de votre carnet dâadresses. Allez, choisissez un autre contact !");
				addStep(chatDelay, function() {
					// show info popup
					$scope.tooltip.content = "Choisissez un contact";
					$scope.tooltip.position(jQuery('#skoupe .inner'), 0, 100);
					$scope.tooltip.active = true;
					callContactCallback = function() {
						scenarii.level3Phase4();
					};
				});
				addStep(chatDelay, function() {
					if ($scope.debug) {
						var contact = utils.shuffle($scope.contacts)[0];
						$scope.callContact(contact);
					}
				});
			} else {
				$scope.canCall = false;
				$scope.tooltip.active = false;
				addChat(chatDelay, 'other', "Bravo ! Vous voyez, maintenant, vous connaissez la crÃ©dibilitÃ© de lâinfo. Il y a quatre niveaux possibles, de 0 Ã©toiles pour une info pas crÃ©dible Ã  trois Ã©toiles pour une super info. A vous de dÃ©cider si vous la publiez ou pas !");
				addChat(chatDelay, 'me', "Je vois... Et je peux demander Ã  mes contacts dâÃ©valuer la crÃ©dibilitÃ© dâune source ?");
				addChat(chatDelay, 'other', "Bien sÃ»r ! En cliquant sur une photo dâavatar ou sur un nom dans le fil Cuicuitter, vous pourrez vÃ©rifier la crÃ©dibilitÃ© de nâimporte qui. Mais il faudra dâabord analyser la source, pour savoir quelles sont ses thÃ©matiques prÃ©fÃ©rÃ©es.");
				addChat(chatDelay, 'me', "Ah... Ca nâa pas lâair facile !");
				addChat(chatDelay, 'other', "Le mieux, câest dâapprendre en faisant. Alors je vous laisse essayer. Nâoubliez pas de publier des infos qui parlent de " + $scope.themes[$scope.currentTheme] + " ou de " + $scope.themes[$scope.mandatory] + ". Bonne journÃ©e !");
				addStep(2500, function() {
					$scope.closeWin('chat');
					$scope.openWin('blog');
				});
			}

			doSteps();
		};

		scenarii.level3End = function() {
			$log.log(">level3End");
			showScoring();
		};

		// Publish Cuit

		$scope.posts = [];
		$scope.publishCuit = function(cuit, force) {
			$scope.currentCuit = cuit;

			if (false && $scope.posts.length === 5) {
				$log.log("already 5 posts");
				$scope.tooltip.content = "vous avez dÃ©jÃ  publiÃ© 5 articles aujourd'hui";
				$scope.tooltip.position(jQuery('#blog'), 0, 100);
				$scope.tooltip.active = true;
				$timeout(function() {
					$scope.tooltip.active = false;
				}, 2000);
			} else {

				if (force) {
					doPublishCuit($scope.currentCuit, true);
				} else {
					promptCallback = function() {
						doPublishCuit($scope.currentCuit);
					};

					$scope.promptContent = "Ãtes-vous sÃ»r de vouloir publier ce Cuit ?";
					$scope.openWin('prompt');

				}
			}

		};

		function doPublishCuit(cuit) {
			$log.log("publishCuit(", cuit);
			var post = {
				cuit: cuit,
				title: cuit.articleTitle,
				date: Math.floor(($scope.totalTime - $scope.remainingTime) / $scope.remainingTime * 10 * 60) + (8 * 60)
			};
			angular.forEach($scope.cuits, function(c, idx) {
				if (c.id === cuit.id) {
					$scope.cuits[idx].published = true;
				}
			});
			$scope.posts.push(post);
			decrementTime("publish-cuit");

			updateFeedback(post);

			updateScore();

			$scope.tooltip.active = false;

			$scope.closeWin('prompt');
			promptCallback = null;
		}

		$scope.unpublish = function(post) {
			$scope.currentPost = post;

			promptCallback = function() {

				$log.log("unpublish(", $scope.currentPost.cuit.id);
				angular.forEach($scope.posts, function(p, idx) {
					if (p.cuit.id === $scope.currentPost.cuit.id) {
						$scope.posts.splice(idx, 1);
						decrementTime("unpublish-cuit");

						updateScore();

					}
				});

				$scope.closeWin('prompt');
				promptCallback = null;
			};

			$scope.promptContent = "Ãtes-vous sÃ»r de vouloir dÃ©publier cet article ?";
			$scope.openWin('prompt');

			addStep(chatDelay, function() {
				if ($scope.debug) {
					jQuery('#prompt .confirm').click();
				}
			});

		};

		$scope.feedback = {
			status: null,
			active: false,
			type: null
		};

		function updateFeedback(post) {
			if ($scope.level === 2) {
				if (post.cuit.theme === $scope.currentTheme) {
					feedback('good', dataService.data.settings.messages['level-2']['feedback-good-theme']);
				} else {
					feedback('bad', dataService.data.settings.messages['level-2']['feedback-wrong-theme']);
				}
			}
		}

		function feedback(type, detail) {
			$log.log("feedback(", type, detail);
			$scope.feedback.type = type;
			if (type === "good") {
				$scope.feedback.status = "Vos lecteurs vont aimer cette publication !";
			}
			if (type === "bad") {
				$scope.feedback.status = "Vos lecteurs ne vont aimer pas cette publication !";
			}
			$scope.feedback.detail = detail;
			$scope.feedback.active = true;
			$log.log($scope.feedback);
			$timeout(function() {
				$scope.feedback.active = false;
			}, 2000);
		}

		$scope.endDay = function() {
			$scope.skipCuits = true;
			scenarii['level' + $scope.level + 'End']();
		};

		$scope.nextLevel = function() {
			ipCookie('level', parseInt($scope.level, 10) + 1, {
				expires: 365
			});
			$location.path('/intro');
		};

		$scope.playAgain = function() {
			$location.path('/play');
		};

		function showScoring() {
			updateScore();
			$scope.showScoring = true;
		}

		function updateScore() {
			var score = 0;
			var scoring = $scope.scoring['level-' + $scope.level];
			if ($scope.level === 2) {
				angular.forEach($scope.posts, function(post, idx) {
					$log.log(post.cuit.theme, '===', $scope.currentTheme);
					if (post.cuit.theme === $scope.currentTheme) {
						score += scoring['select-cuit-in-correct-theme'];
						$scope.posts[idx].score = scoring['select-cuit-in-correct-theme'];
					} else {
						score += scoring['select-cuit-in-wrong-theme'];
						$scope.posts[idx].score = scoring['select-cuit-in-wrong-theme'];
					}
				});
			}
			$log.log("score : " + score);
			var cookieScores = ipCookie('scores');
			if (!cookieScores) {
				cookieScores = {};
			}
			cookieScores['level-' + $scope.level] = score;
			ipCookie('scores', cookieScores, {
				expires: 21
			});
			$scope.scores = cookieScores;
			$log.log(scoring);
			$log.log($scope.scoring);
			if (scoring) {
				$scope.scoreStatus = score > $scope.scoring['level-' + $scope.level]['winning-score'] ? 'victory' : 'defeat';
			} else {
				$scope.scoreStatus = 'victory';
			}
			$log.log(cookieScores);
		}

		/*
		App is ready to go
		*/

		$timeout(function() {
			addCuit(true);
		}, 50);

		$timeout(function() {
			scenario();
		}, 500);

	});